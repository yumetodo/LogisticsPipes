buildscript {
    repositories {
        maven { url = "https://jcenter.bintray.com/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

plugins {
    id "de.undercouch.download" version "4.1.1"
}

ant.importBuild 'download-api.xml'
ant.importBuild 'build-ant.xml'

apply plugin: 'forge'
apply plugin: 'curseforge'

version = "0.9.3"
def buildby = 'local'

def ENV = System.getenv()
if (ENV.GITHUB_ACTIONS) {
    if (!ENV.GIT_TAG) {
        version += "." + ENV.GITHUB_RUN_NUMBER
    }
	buildby = 'yumetodo-github-actions'
} else {
	version += ".local"
}

group= "rs485.logisticspipes" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "logisticspipes-fy"

ant.version = version
ant.archivesBaseName = archivesBaseName

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = "run/assets"
    replace '%VERSION%', project.version
    replace '%MCVERSION%', "1.7.10"
    replace '%DEBUG%', "false"
	replaceIn "LogisticsPipes.java"
	replaceIn "LPConstants.java"
}

jar {
    manifest {
        attributes(	'FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader', 
					'FMLCorePluginContainsFMLMod': 'true',
					'Implementation-Vendor': 'RS485',
					'Implementation-Title': 'LogisticsPipes',
					'Implementation-Version': version,
					'Built-By': buildby )
    }
}

// configure  the source folders
sourceSets {
    main {
        java {
            srcDir 'common'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
        resources {
            srcDir 'resources'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
    }
    api {
        java {
            srcDir 'dummy'
            srcDir 'api'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
	}
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
    compile files("build/download/buildcraft-7.1.23-dev.jar")
    compileOnly 'org.projectlombok:lombok:1.16.4'
    annotationProcessor 'org.projectlombok:lombok:1.16.4'
    compile files("build/download/NotEnoughItems-1.7.10-1.0.5.111-dev.jar")
    compile files("build/download/CodeChickenCore-1.7.10-1.0.7.46-dev.jar")
    compile files("build/download/CodeChickenLib-1.7.10-1.1.3.140-dev.jar")
    compile files("build/download/EnderStorage-1.7.10-1.4.7.36-dev.jar")
}

idea {
    module {
        sourceDirs += file('dummy')
        sourceDirs += file('api')
    }
}

task deobfJar(type: Jar, dependsOn: 'jar') {
	from sourceSets.main.output
	classifier = 'dev'
	manifest {
        attributes(	'FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader', 
					'FMLCorePluginContainsFMLMod': 'true',
					'Implementation-Vendor': 'RS485',
					'Implementation-Title': 'LogisticsPipes',
					'Implementation-Version': version,
					'Built-By': buildby )
    }
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

task sourceJar(type: Jar, dependsOn: 'jar') {
	from sourceSets.main.allSource
	classifier = 'src'
}

curse {
	displayName = 'Logistics Pipes 0.9.3 (BC7) build ' + System.getenv().BUILD_NUMBER
	
    projectId = '232838'
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''
    releaseType = 'release'

    changelog = project.hasProperty('changelog') ? project.changelog : ''
}

artifacts {
	archives deobfJar
	archives sourceJar
	archives jar
}

task downloadLang(type: Download){
    src 'https://github.com/RS485/LogisticsPipes-Language/archive/master.zip'
    dest new File("${buildDir}/download", 'language.zip')
    onlyIfModified true
}

task downloadAndUnzipFile(dependsOn: downloadLang, type: Copy) {
    from zipTree(downloadLang.dest)
    into "${buildDir}/resources/assets/logisticspipes/lang"
}

task integrateLang(dependsOn: downloadAndUnzipFile, type: Delete) {
    delete fileTree("${buildDir}/resources/assets/logisticspipes/lang") {
        exclude '**/*.lang'
    }
}

tasks.compileApiJava.dependsOn('extract')
tasks.compileJava.dependsOn('loadFingerprints')
tasks.processResources.dependsOn('integrateLang')
tasks.assemble.dependsOn('deobfJar', 'sourceJar', 'signJars')
